1. InetSocketAddress用于实现套接字地址（ip地址 + 端口）。ip地址由InetAddress实现，端口由int数字实现
	InetSocketAddress(InetAddress ip ， int port );
2. InetAddress类提供了操作IP地址的各种方案。
	InetAddress.getByName()
	InetAddress.getByAddress()

3. BIO编程主要使用的是ServerSocket和Socket，通过其中的InputStream和OutputStream实现，这样的方式弊端在于服务器每次接受到请求的
     时候会分配一个线程来进行处理，这样会消耗很多的资源，具体的实现见BIO.java

4. NIO编程主要使用的是ServerSocketChannel和SocketChannel，通过Selector来进行channel选取，选取的channel由event来决定。一个线程
     维护一个Selector，一个Selector可以完成对多个Channel的监控。具体的实现见NIO.java

5. 为什么获取到selectionKey的Set集合，对selectionKey关联的各个集合进行具体操作之后，需要将该SelectionKey从集合中移除呢？
	需要注意的是，在selector中存在keys()方法，这个方法可以返回所有在该selector注册且没有cancel的selectionKey（即channel）
	而selectedKeys()方法是从keys()集合中获取就绪的channel个数，如果不将已经执行的channel从selectedKeys的集合中移除
          那么将不会执行获取操作，也即该channel不会进行操作。因此为了避免这种情况发生，应该在对channel执行完操作后将其从selectedKeys
          集合中移除

6. 为什么在每个channel对应的pipeLine中，要先将编解码器添加进去——addLast()
	因为在pipeline执行时，会根据channelHandlerContext的inbound和outbound属性判断是出站还是入站操作
	入站操作是从head到tail ， 出站操作是从tail到head，因此虽然解码handler和编码handler都是在最开始的时候添加，
         但是执行的时期是不同的。入站handler执行前执行解码操作 ， 出站handler在其他handler执行之后执行编码操作。
         因此编解码handler需要在最初始时添加